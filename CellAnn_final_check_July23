##### CellAnn ####
##### CellAnn final checking !!! #####
#####
##### merge the list table with ######
#####

ssh plyu3@omb2.onc.jhmi.edu
U[9C20&&

#####
#####
setwd("/zp1/data/plyu3/CellAnn_final_check")

check_list <- read.table("reference_table2_final_path.txt",sep="\t",header=T)


check_list$sp = "unknown"

datasheet = read.csv("database_sheet1.csv")

#####
#####

for(i in 1:length(check_list$PMID)){
	tmp = check_list$PMID[i]
	m = match(tmp,datasheet$PMID)
	if(length(m) == 1){
		check_list$sp[i] = datasheet$species[m]
	}
}

#####
#####
#####
#####

library(writexl)
write_xlsx(check_list,path="check_list3.xlsx")



#####
#####
#####
#####


ssh plyu3@omb2.onc.jhmi.edu
U[9C20&&


conda activate seurat4
R
setwd("/zp1/data/plyu3/CellAnn_final_check")

#####
#####


/zp1/data/plyu3/CellAnn_final_check/reference_table2_final_path.txt

#####
#####
#####

check_list <- read.table("reference_table2_final_path.txt",sep="\t",header=T)

colnames(check_list)

#####
##### check each single file #######
#####
colnames(check_list)
"PMID"       "Server"     "Folder"     "TAG"        "seurat_tag"

check_process_Step1 <- function(check_list){
	######
	check_list$seurat_tag = "NotFind!!!"
	######
	for(i in 1:length(check_list$Folder)){
		print(i)
		tmp_folder = check_list$Folder[i]
		######
		setwd(tmp_folder)
		files = list.files()
		index = grep("_seurat_obj_new$",files)
		######
		if(length(index) == 1){
			files_need = files[index]
			files_need_tag = gsub("_seurat_obj_new","",files_need)
			check_list$seurat_tag[i] = files_need_tag
		}
	}
	return(check_list)
}

check_list2 = check_process_Step1(check_list)

######
###### then we write excel to check !!! ######
######

setwd("/zp1/data/plyu3/CellAnn_final_check")
library(writexl)
write_xlsx(check_list2,path="check_list2.xlsx")

######
######
###### Next we will reduce the number of cells for each sample for each cell type !! ########
###### Then we will prepare the python object to check the results !!!! #####################
######
###### See the basic format of the seurat objects ######
######



check_process_Step2 <- function(check_list,list_number=1:439){
	######
	######
	######
	for(i in list_number){
		print(i)
		tmp_folder = check_list$Folder[i]
		print(tmp_folder)
		######
		setwd(tmp_folder)
		files = list.files()
		index = grep("_seurat_obj_new$",files)
		######
		files_need = files[index]
		files_need_tag = gsub("_seurat_obj_new","",files_need)
		######
		tmp_seurat = readRDS(files_need)
		###### count matrix is the count matrix !!!! ###########
		###### count_matrix = tmp_seurat[['RNA']]@counts
		###### head(Matrix::colSums(count_matrix))
		tmp_cells_all = c()
		######
		table_ct = data.frame(table(tmp_seurat$celltype))
		######
		table_ct = table_ct[which(table_ct$Freq > 0),]
		######
		table_ct$Freq_new = 0
		for(j in 1:length(table_ct$Var1)){
			tmp_ct_name = as.character(table_ct$Var1[j])
			tmp_ct_num = table_ct$Freq[j]
			######
			tmp_ct_seurat = tmp_seurat[,which(tmp_seurat$celltype == tmp_ct_name)]
			######
			if(tmp_ct_num > 300){
				#### half half ####
				delta = round(tmp_ct_num - 300)/2
				tmp_ct_seurat_cell_tab = tmp_ct_seurat@meta.data[,c('nCount_RNA','cell_id')]
				tmp_ct_seurat_cell_tab = tmp_ct_seurat_cell_tab[order(tmp_ct_seurat_cell_tab$nCount_RNA),]
				####
				cell_index = tmp_ct_seurat_cell_tab$cell_id[c(delta+1):c(length(tmp_ct_seurat_cell_tab$cell_id)-delta)]
				####
				tmp_ct_seurat_sub = tmp_ct_seurat[,which(tmp_ct_seurat$cell_id %in% cell_index == T)]
				tmp_cells_all = c(tmp_cells_all,tmp_ct_seurat_sub$cell_id)
			}
			if(tmp_ct_num < 301){
				tmp_ct_seurat_sub = tmp_ct_seurat
				tmp_cells_all = c(tmp_cells_all,tmp_ct_seurat_sub$cell_id)
			}
			table_ct$Freq_new[j] = dim(tmp_ct_seurat_sub)[2]
		}
		######
		tmp_seurat_new = tmp_seurat[,which(tmp_seurat$cell_id %in% tmp_cells_all == T)]
		###### new seurat ###
		FN = paste(files_need,'_clean',sep='')
		saveRDS(tmp_seurat_new,file=FN)
		######
		FN2 = paste(files_need,'_cleanstat.txt',sep='')
		write.table(table_ct,file=FN2,sep='\t',row.names=F,quote=F)
	}
	print('Done!!!')
}

check_process_Step2(check_list,list_number=214:439)

#####
##### celltype, dim1, dim2, nCount_RNA #######
#####

#####
##### 如果大于阈值 那么去掉最 小的 counts 和 最大的 counts ###########
##### 不用管 UMAP 了 其实 ########################################
#####


#####
##### Next convert to python format scvi piplines ##############
#####

ssh plyu3@omb2.onc.jhmi.edu
U[9C20&&

#####
#####
conda activate seurat4
R
setwd("/zp1/data/plyu3/CellAnn_final_check")

#####
#####

library(Seurat)
setwd("/zp1/data/plyu3/CellAnn_final_check")
check_list <- read.table("reference_table2_final_path.txt",sep="\t",header=T)

##### blue #######
##### blue #######
##### blue #######
##### blue #######
##### blue #######
##### blue #######
##### blue #######
##### blue #######
##### blue #######




check_process_Step3 <- function(check_list,list_number=1:439){
	######
	######
	######
	for(i in list_number){
		print(i)
		tmp_folder = check_list$Folder[i]
		print(tmp_folder)
		######
		setwd(tmp_folder)
		files = list.files()
		index = grep("_seurat_obj_new_clean$",files)
		######
		files_need = files[index]
		files_need_tag = gsub("_seurat_obj_new_clean","",files_need)
		######
		tmp_seurat = readRDS(files_need)
		###### count matrix is the count matrix !!!! ###########
		library(Seurat)
		write.csv(Matrix::t(tmp_seurat[['RNA']]@counts), file = "py_expression_matrix.csv", row.names = TRUE)
		write.csv(tmp_seurat@meta.data, file = "py_cell_metadata.csv", row.names = TRUE)
		write.csv(rownames(tmp_seurat), file = "py_gene_metadata.csv")
		###### count matrix ####################################
		######
		#####
		###### new seurat ###
		#####
	}
	print('Done!!!')
}


check_process_Step3(check_list,list_number=1:439)

#####
##### let us test in python whether we can read the file !!! #######
#####


ssh plyu3@omb2.onc.jhmi.edu
U[9C20&&


conda activate scvi-env
python

import subprocess
import argparse
import os
import re
import pandas as pd
import scanpy as sc
import scvi
import anndata
import scipy.io as sio
import copy

os.chdir("/zp1/data/plyu3/CellAnn_final_check/Test_datasets")

expression_matrix = anndata.read_mtx("Bladder_example_cl_expression_matrix.mtx")
cell_metadata = pd.read_csv("Bladder_example_cl_cell_metadata.csv", index_col=0)
gene_metadata = pd.read_csv("Bladder_example_cl_gene_metadata.csv", index_col=0)

anndata_obj = copy.deepcopy(expression_matrix)
anndata_obj.obs = cell_metadata
anndata_obj.var['gene_name'] = gene_metadata['x']

######
###### Note that this dataset has the counts already separated in a layer. Here, adata.X contains log transformed scran normalized expression.
######
## red ##
## red ##
## red ##
#sc.pp.normalize_total(anndata_obj, target_sum=1e6)
#sc.pp.log1p(anndata_obj)

#UserWarning: `flavor='seurat_v3'` expects raw count data
anndata_obj.layers["counts"] = anndata_obj.X

#count_mat = anndata_obj.layers["counts"].toarray() 

#anndata_obj.obs["batch"]

####### 

sc.pp.highly_variable_genes(
        anndata_obj,
        flavor="seurat_v3",
        n_top_genes=3000,
        layer="counts",
        batch_key="batch",
        subset=True
) 

#######
scvi.model.SCVI.setup_anndata(anndata_obj, layer="counts", batch_key="batch")
vae = scvi.model.SCVI(anndata_obj, n_layers=2, n_latent=30, gene_likelihood="nb")

vae.train()

corrected_data_vae = vae.get_normalized_expression()

lvae = scvi.model.SCANVI.from_scvi_model(
        vae,
        adata=anndata_obj,
        labels_key="celltype",
        unlabeled_category="Unknown",
)

lvae.train(max_epochs=20, n_samples_per_label=100)

######
######

corrected_data_lvae = lvae.get_normalized_expression()


######
######

anndata_obj.obsm["X_scANVI"] = lvae.get_latent_representation(anndata_obj)

###### pip install pymde
from scvi.model.utils import mde

anndata_obj.obsm["X_mde_scanvi"] = mde(anndata_obj.obsm["X_scANVI"])

###### temp save it as the pkl file: ########
######

import pickle

with open("anndata_obj.pkl", "wb") as f:
    pickle.dump(anndata_obj, f)


with open("anndata_obj.pkl", "rb") as f:
    loaded_anndata = pickle.load(f)

import copy

anndata_obj = copy.deepcopy(loaded_anndata)

###### let us plot the figures !!! ########

#width = 16  # Change this value to the desired width in inches
#height = 8  # Change this value to the desired height in inches
#plt.figure(figsize=(width, height))


sc.pl.embedding(
    anndata_obj,
    basis="X_mde_scanvi",
    color="batch",
    frameon=False,
    save='batch_cl.png'
)


###### great the class tag is leiden !!! ########



###### Next get new cell clusters !!!! #########
######

sc.pp.neighbors(anndata_obj, use_rep="X_scANVI")
sc.tl.leiden(anndata_obj)


sc.pl.embedding(
    anndata_obj,
    basis="X_mde_scanvi",
    color="leiden",
    frameon=False,
    save='leiden_1.png'
)



sc.pl.embedding(
    anndata_obj,
    basis="X_mde_scanvi",
    color="_scvi_labels",
    frameon=False,
    save='scvi_labels.png'
)
######
######

anndata_obj_scANVI = pd.DataFrame(anndata_obj.obsm['X_scANVI'])
anndata_obj_scANVI = anndata_obj_scANVI.add_prefix('SCANVI_')
Cellnames = list(pd.DataFrame(anndata_obj.obs['_scvi_batch']).index)

anndata_obj_scANVI['Cell_ID'] = Cellnames
anndata_obj_scANVI.to_csv(file_output, sep="\t",index=False)


anndata_obj_meta = pd.DataFrame(anndata_obj.obs)
file_output = "test_meta.csv"
anndata_obj_meta.to_csv(file_output, sep="\t",index=False)

#####
##### OK!!! Next we will output corrected matrix !!!! ##########
#####

anndata_obj.X.toarray() 
anndata_obj.layers['counts'].toarray() 



#####
##### OK!!! Next we will integrate for the test datasets #######
#####

##### we will integrate from background matrix3 and query data matrix3 !!! #######
#####
##### we need testdatasets to go through the pipline !!! #######
#####
##### see the seurat examples in the old computer #####
#####

##### we will test the example integrate matrix !!! ###
#####
##### 先大概看一下 subset 和 integrate 的 情况 ！！！ #####
#####
##### 先loading以下datasets ！！！ ########
#####

ssh plyu3@omb2.onc.jhmi.edu
U[9C20&&

conda activate seurat4

R

setwd("/zp1/data/plyu3/CellAnn_final_check/Test_datasets")

load("droplet_seurat_merge")
load("facs_seurat_merge")

###### see the meta data ###############

head(droplet_seurat_merge@meta.data)

table(droplet_seurat_merge$tissue)

table(facs_seurat_merge$tissue)

###### extract facs Bladder ############

Bladder_facs_seurat_merge <- facs_seurat_merge[,which(facs_seurat_merge$tissue == "Bladder")]

###### OK!!! count matrix ##############

Bladder_facs_seurat_merge[['RNA']]@counts

droplet_seurat_merge[['RNA']]@counts


######
###### OK!!! let us merge the matrix ####
######


batch_list = c("batch_sub","batch_background")

x = Bladder_facs_seurat_merge
y = droplet_seurat_merge

tag = c('Bladder_example_')

Output_py_matrix_test <- function(x,y,batch_list,tag){
	#########
	mat_x = x[['RNA']]@counts
	mat_y = y[['RNA']]@counts
	#########
	overlap_G = rownames(mat_x)[which(rownames(mat_x) %in% rownames(mat_y) == T)]
	#########
	mat_x_cl = mat_x[which(rownames(mat_x) %in% overlap_G == T),]
	mat_y_cl = mat_y[which(rownames(mat_y) %in% overlap_G == T),]
	########
	match_x = match(overlap_G,rownames(mat_x_cl))
	match_y = match(overlap_G,rownames(mat_y_cl))
	#########
	mat_x_cl_s = mat_x_cl[match_x,]
	mat_y_cl_s = mat_y_cl[match_y,]
	##########
	all.equal(rownames(mat_x_cl_s),rownames(mat_y_cl_s))
	########## Next we will add cell meta #####
	cell_meta_x = x@meta.data[,c('tissue','celltype')]
	cell_meta_x$cell_id = rownames(cell_meta_x)
	##########
	cell_meta_y = y@meta.data[,c('tissue','celltype')]
	cell_meta_y$cell_id = rownames(cell_meta_y)
	##########
	cell_meta_x$batch = batch_list[1]
	cell_meta_y$batch = batch_list[2]
	##########
	cell_meta_x$celltype = paste0('sample_',cell_meta_x$celltype)
	cell_meta_y$celltype = paste0('back_',cell_meta_y$celltype)
	##########
	mat_combined = cbind(mat_x_cl_s,mat_y_cl_s)
	cell_meta_combined = rbind(cell_meta_x,cell_meta_y)
	##########
	all.equal(colnames(mat_combined),cell_meta_combined$cell_id)
	##########
	mat_file_name = paste0(tag,"expression_matrix.mtx")
	cell_file_name = paste0(tag,"cell_metadata.csv")
	gene_file_name = paste0(tag,"gene_metadata.csv")
	#########
	library(Seurat)
	library(Matrix)
	writeMM(Matrix::t(mat_combined), file = mat_file_name, row.names = TRUE)
	write.csv(cell_meta_combined, file = cell_file_name, row.names = TRUE)
	write.csv(rownames(mat_combined), file = gene_file_name, row.names = TRUE)
	#########
}

#############
#############

setwd("/zp1/data/plyu3/CellAnn_final_check/Test_datasets")

Output_py_matrix_test(x=Bladder_facs_seurat_merge,y=droplet_seurat_merge,batch_list,tag="Bladder_example_")

#############
############# Next test it in python ############
#############

输出30dim
输出UMAP
输出cluster
输出Matrix

############# set it in python ###################
#############


############# 然后就是 subset reference ###########
#############



############# let us filter the altas cells and see the results again ####
#############
#############
setwd("/zp1/data/plyu3/CellAnn_final_check/Test_datasets")

load("droplet_seurat_merge")

droplet_seurat_merge$index = paste0(droplet_seurat_merge$tissue,"~~",droplet_seurat_merge$celltype)

altas_seurat = droplet_seurat_merge

check_process_Step_altas <- function(altas_seurat){
	######
	###### the index tag for altas_seurat ######
	######
	table_ct = data.frame(table(altas_seurat$index))
	######
	table_ct = table_ct[which(table_ct$Freq > 0),]
	######
	tmp_cells_all = c()
	######
	tmp_mat = altas_seurat[['RNA']]@counts
	######
	tmp_seurat = CreateSeuratObject(tmp_mat)
	tmp_seurat$index = altas_seurat$index
	tmp_seurat$cell_id = colnames(tmp_seurat)
	for(j in 1:length(table_ct$Var1)){
			tmp_ct_name = as.character(table_ct$Var1[j])
			tmp_ct_num = table_ct$Freq[j]
			######
			tmp_ct_seurat = tmp_seurat[,which(tmp_seurat$index == tmp_ct_name)]
			######
			if(tmp_ct_num > 500){
				#### half half ####
				delta = round(tmp_ct_num - 500)/2
				tmp_ct_seurat_cell_tab = tmp_ct_seurat@meta.data[,c('nCount_RNA','cell_id')]
				tmp_ct_seurat_cell_tab = tmp_ct_seurat_cell_tab[order(tmp_ct_seurat_cell_tab$nCount_RNA),]
				####
				cell_index = tmp_ct_seurat_cell_tab$cell_id[c(delta+1):c(length(tmp_ct_seurat_cell_tab$cell_id)-delta)]
				####
				tmp_ct_seurat_sub = tmp_ct_seurat[,which(tmp_ct_seurat$cell_id %in% cell_index == T)]
				tmp_cells_all = c(tmp_cells_all,tmp_ct_seurat_sub$cell_id)
			}
			if(tmp_ct_num < 501){
				tmp_ct_seurat_sub = tmp_ct_seurat
				tmp_cells_all = c(tmp_cells_all,tmp_ct_seurat_sub$cell_id)
			}
			table_ct$Freq_new[j] = dim(tmp_ct_seurat_sub)[2]
	}
	######
	tmp_seurat_new = tmp_seurat[,which(tmp_seurat$cell_id %in% tmp_cells_all == T)]
	###### new seurat ###
	return(tmp_seurat_new)
}

droplet_seurat_merge_cl = check_process_Step_altas(droplet_seurat_merge)

###########
###########

setwd("/zp1/data/plyu3/CellAnn_final_check/Test_datasets")
saveRDS(droplet_seurat_merge_cl,file='droplet_seurat_merge_cl')

droplet_seurat_merge_cl$tissue = sapply(strsplit(droplet_seurat_merge_cl$index,split='~~'),function(x) x[[1]])
droplet_seurat_merge_cl$celltype = sapply(strsplit(droplet_seurat_merge_cl$index,split='~~'),function(x) x[[2]])

setwd("/zp1/data/plyu3/CellAnn_final_check/Test_datasets")
saveRDS(droplet_seurat_merge_cl,file='droplet_seurat_merge_cl')

###########
########### output to the python input ######
###########
batch_list = c("batch_sub","batch_background")

x = Bladder_facs_seurat_merge
y = droplet_seurat_merge_cl

tag = c('Bladder_example_cl_')

setwd("/zp1/data/plyu3/CellAnn_final_check/Test_datasets")
Output_py_matrix_test(x=Bladder_facs_seurat_merge,y=droplet_seurat_merge_cl,batch_list,tag="Bladder_example_cl_")

###########
########### OK!!! Let us try python code !!!! #####
###########

###########
###########

########### OK!!! Next cleaned Bladder_facs_seurat_merge with droplet_seurat_merge_cl ###
###########

folder = "/zp1/data/plyu3/Altas_add_CellAnn/Tabula_Muris_Senis_Smartseq2/bladder_lumenSmartseq2"

TAG = 'M_Tabula_Muris'

###########
###########

Merge_datasets <- function(folder,TAG){
	##########
	setwd(folder)
	##########
	files = list.files()
	##########
	ref_seurat = files[grep("_new_clean$",files)]
	ref_seurat_obj = readRDS(ref_seurat)
	##########
	tag = gsub("_seurat_obj_new_clean","",ref_seurat)
	##########
	if(TAG == 'M_Tabula_Muris'){
		back_seurat = readRDS("/zp1/data/plyu3/CellAnn_final_check/Test_datasets/droplet_seurat_merge_cl")
		#######
		#######
		tag2 = paste0(tag,"__",TAG)
		batch_list = c("batch_sub","batch_background")
		setwd(folder)
		Output_py_matrix_test(x=ref_seurat_obj,y=back_seurat,batch_list,tag=tag2)
	}
	######
}


########### Let us try python script !!!! #########
###########

ssh plyu3@omb2.onc.jhmi.edu
U[9C20&&

############


conda activate scvi-env
python

import subprocess
import argparse
import os
import re
import pandas as pd
import scanpy as sc
import scvi
import anndata
import scipy.io as sio
import copy

folder = "/zp1/data/plyu3/Altas_add_CellAnn/Tabula_Muris_Senis_Smartseq2/bladder_lumenSmartseq2"
os.chdir(folder)

#### list files and load the datasets ######

def load_anndata_from_folder_tag(folder):
	#######
	os.chdir(folder)
	files_in_folder = os.listdir(folder)
	file_pattern_2 = r'__.+expression_matrix.mtx'
	#######
	matching_elements_2 = [element for element in files_in_folder if re.search(file_pattern_2, element)]
	#######
	new_string = re.sub(r'expression_matrix.mtx', "", matching_elements_2[0])
	#######
	return new_string


def load_anndata_from_folder(folder):
	os.chdir(folder)
	files_in_folder = os.listdir(folder)
	#######
	file_pattern_1 = r'__.+cell_metadata.csv'
	file_pattern_2 = r'__.+expression_matrix.mtx'
	file_pattern_3 = r'__.+gene_metadata.csv'
	#######
	matching_elements_1 = [element for element in files_in_folder if re.search(file_pattern_1, element)]
	matching_elements_2 = [element for element in files_in_folder if re.search(file_pattern_2, element)]
	matching_elements_3 = [element for element in files_in_folder if re.search(file_pattern_3, element)]
	#######
	expression_matrix = anndata.read_mtx(matching_elements_2[0])
	cell_metadata = pd.read_csv(matching_elements_1[0], index_col=0)
	gene_metadata = pd.read_csv(matching_elements_3[0], index_col=0)
	#######
	anndata_obj = copy.deepcopy(expression_matrix)
	anndata_obj.obs = cell_metadata
	anndata_obj.var['gene_name'] = gene_metadata['x'].tolist()
	######
	return anndata_obj



#######
#######
anndata_obj_name = load_anndata_from_folder_tag(folder)
anndata_obj = load_anndata_from_folder(folder)


#######
#######
#######


def Process_anndatasets(anndata_obj,anndata_obj_name):
	### Get vae and lave ###
	anndata_obj.layers["counts"] = anndata_obj.X
	###
	sc.pp.highly_variable_genes(
        anndata_obj,
        flavor="seurat_v3",
        n_top_genes=3000,
        layer="counts",
        batch_key="batch",
        subset=True
	)
	###
	scvi.model.SCVI.setup_anndata(anndata_obj, layer="counts", batch_key="batch")
	vae = scvi.model.SCVI(anndata_obj, n_layers=2, n_latent=30, gene_likelihood="nb")
	vae.train()
	###
	lvae = scvi.model.SCANVI.from_scvi_model(
        vae,
        adata=anndata_obj,
        labels_key="celltype",
        unlabeled_category="Unknown",
	)
	###
	lvae.train(max_epochs=20, n_samples_per_label=100)
	###
	anndata_obj.obsm["X_scANVI"] = lvae.get_latent_representation(anndata_obj)
	###
	### next perform cluster analysis ###
	###
	from scvi.model.utils import mde
	anndata_obj.obsm["X_mde_scanvi"] = mde(anndata_obj.obsm["X_scANVI"])
	###
	### output the celltype,batch and cluster plot !!! #######
	###
	FN1 = anndata_obj_name + '_batch.png'
	sc.pl.embedding(
    	anndata_obj,
    	basis="X_mde_scanvi",
    	color="batch",
    	frameon=False,
    	save=FN1
	)
	###
	FN2 = anndata_obj_name + '_celltype.png'
	sc.pl.embedding(
    	anndata_obj,
    	basis="X_mde_scanvi",
    	color="celltype",
    	frameon=False,
    	save=FN2
	)
	###
	sc.pp.neighbors(anndata_obj, use_rep="X_scANVI")
	sc.tl.leiden(anndata_obj)
	###
	FN3 = anndata_obj_name + '_cluster.png'
	sc.pl.embedding(
    	anndata_obj,
    	basis="X_mde_scanvi",
    	color="leiden",
    	frameon=False,
    	save=FN3
	)
	### Next output the meta data and the corrected matrix ###
	###
	corrected_data_lvae = lvae.get_normalized_expression()
	###
	### output corrected matrix #####
	### mtx,gene and cells ##########
	### type(corrected_data_lvae) ###
	corrected_data_lvae_array = corrected_data_lvae.values
	###
	import numpy as np
	from scipy.sparse import csr_matrix
	from scipy.io import mmwrite
	matrix = csr_matrix(corrected_data_lvae_array)
	###
	FN4 = anndata_obj_name + '_backmergeCorrect.mtx'
	mmwrite(FN4, matrix)
	###
	FN5 = anndata_obj_name + '_backmergeCorrect_Cells.csv'
	###
	### Cells = corrected_data_lvae.index.values.tolist()
	###
	Cells_meta = anndata_obj.obs
	###
	#Cells2 = Cells_meta.index.values.tolist()
	###
	#Cells == Cells2
	####
	Cells_meta.to_csv(FN5,index=False)
	####
	FN6 = anndata_obj_name + '_backmergeCorrect_Genes.csv'
	####
	Gene = anndata_obj.var['gene_name'].to_frame()
	####
	Gene.to_csv(FN6)
	####
	#### Next save tbe anndatasets ##########
	####
	import pickle
	FN7 = anndata_obj_name + '_backmergeCorrect.pkl'
	with open(FN7, "wb") as f:
    	pickle.dump(anndata_obj, f)
	#####
	print('Done!')



######
######
######









######
###### Note that this dataset has the counts already separated in a layer. Here, adata.X contains log transformed scran normalized expression.
######
## red ##
## red ##
## red ##
#sc.pp.normalize_total(anndata_obj, target_sum=1e6)
#sc.pp.log1p(anndata_obj)

#UserWarning: `flavor='seurat_v3'` expects raw count data
anndata_obj.layers["counts"] = anndata_obj.X

#count_mat = anndata_obj.layers["counts"].toarray() 

#anndata_obj.obs["batch"]

####### 

sc.pp.highly_variable_genes(
        anndata_obj,
        flavor="seurat_v3",
        n_top_genes=3000,
        layer="counts",
        batch_key="batch",
        subset=True
) 

#######
scvi.model.SCVI.setup_anndata(anndata_obj, layer="counts", batch_key="batch")
vae = scvi.model.SCVI(anndata_obj, n_layers=2, n_latent=30, gene_likelihood="nb")

vae.train()

corrected_data_vae = vae.get_normalized_expression()

lvae = scvi.model.SCANVI.from_scvi_model(
        vae,
        adata=anndata_obj,
        labels_key="celltype",
        unlabeled_category="Unknown",
)

lvae.train(max_epochs=20, n_samples_per_label=100)

######
######

corrected_data_lvae = lvae.get_normalized_expression()


######
######

anndata_obj.obsm["X_scANVI"] = lvae.get_latent_representation(anndata_obj)

###### pip install pymde
from scvi.model.utils import mde

anndata_obj.obsm["X_mde_scanvi"] = mde(anndata_obj.obsm["X_scANVI"])

###### temp save it as the pkl file: ########
######

import pickle

with open("anndata_obj.pkl", "wb") as f:
    pickle.dump(anndata_obj, f)


with open("anndata_obj.pkl", "rb") as f:
    loaded_anndata = pickle.load(f)

import copy

anndata_obj = copy.deepcopy(loaded_anndata)

###### let us plot the figures !!! ########

#width = 16  # Change this value to the desired width in inches
#height = 8  # Change this value to the desired height in inches
#plt.figure(figsize=(width, height))


sc.pl.embedding(
    anndata_obj,
    basis="X_mde_scanvi",
    color="batch",
    frameon=False,
    save='batch_cl.png'
)


###### great the class tag is leiden !!! ########



###### Next get new cell clusters !!!! #########
######

sc.pp.neighbors(anndata_obj, use_rep="X_scANVI")
sc.tl.leiden(anndata_obj)


sc.pl.embedding(
    anndata_obj,
    basis="X_mde_scanvi",
    color="leiden",
    frameon=False,
    save='leiden_1.png'
)



sc.pl.embedding(
    anndata_obj,
    basis="X_mde_scanvi",
    color="_scvi_labels",
    frameon=False,
    save='scvi_labels.png'
)


#### red ####
#### red ####
#### red ####

import sys
custom_module_path = '/zp1/data/plyu3/CellAnn_final_check/module'
sys.path.append(custom_module_path)

import cellann_final
import os

folder = "/zp1/data/plyu3/Altas_add_CellAnn/Tabula_Muris_Senis_Smartseq2/bladder_lumenSmartseq2"
os.chdir(folder)

anndata_obj_name = cellann_final.load_anndata_from_folder_tag(folder)
anndata_obj = cellann_final.load_anndata_from_folder(folder)

#### red ######
#### red ######
#### red ######

cellann_final.Process_anndatasets(anndata_obj,anndata_obj_name)

##### Step1 is the one which #####
##### yellow #####
##### blue #####
##### green #####

##### let us run the final piplines !!!! ######

ssh plyu3@omb2.onc.jhmi.edu
U[9C20&&

##### prepare the samples list ######

conda activate seurat4
R

#####

setwd("/zp1/data/plyu3/CellAnn_final_check")

library(readxl)

data <- data.frame(read_xlsx("check_list3.xlsx"))

data_list <- data

##### 
##### list #######
#####

i_index = which(data_list$Background == 'M_Tabula_Muris')

######
###### let us merge the files with background files ########
######

file_list = data_list

Step1_merge_sample_cl_with_back <- function(file_list,i_index){
	######## return will be update the file_list file ##########
	######## loop each samples ########
	for(i in i_index){
		print(i)
		##### "Folder" #####
		folder = file_list$Folder[i]
		##### setwd ########
		setwd(folder)
		##### TAG ##########
		TAG = file_list$Background[i]
		#####
		tag = Merge_datasets(folder,TAG)
		#####
		file_list$TAG[i] = tag
	}
	###########
	return(file_list)
}

Merge_datasets <- function(folder,TAG){
	##########
	setwd(folder)
	##########
	files = list.files()
	##########
	ref_seurat = files[grep("_new_clean$",files)]
	ref_seurat_obj = readRDS(ref_seurat)
	##########
	tag = gsub("_seurat_obj_new_clean","",ref_seurat)
	##########
	if(TAG == 'M_Tabula_Muris'){
		back_seurat = readRDS("/zp1/data/plyu3/CellAnn_final_check/Test_datasets/droplet_seurat_merge_cl")
		#######
		#######
		tag2 = paste0(tag,"__",TAG)
		batch_list = c("batch_sub","batch_background")
		setwd(folder)
		Output_py_matrix_test(x=ref_seurat_obj,y=back_seurat,batch_list,tag=tag2)
	}
	if(TAG == 'MCL'){

	}
	######
	return(tag)
}

Merge_datasets_Lite <- function(folder,TAG){
	##########
	setwd(folder)
	files = list.files()
	##########
	ref_seurat = files[grep("_new_clean$",files)]
	ref_seurat_obj = readRDS(ref_seurat)
	##########
	tag = gsub("_seurat_obj_new_clean","",ref_seurat)
	######
	return(tag)
}

Output_py_matrix_test <- function(x,y,batch_list,tag){
	#########
	mat_x = x[['RNA']]@counts
	mat_y = y[['RNA']]@counts
	#########
	overlap_G = rownames(mat_x)[which(rownames(mat_x) %in% rownames(mat_y) == T)]
	#########
	mat_x_cl = mat_x[which(rownames(mat_x) %in% overlap_G == T),]
	mat_y_cl = mat_y[which(rownames(mat_y) %in% overlap_G == T),]
	########
	match_x = match(overlap_G,rownames(mat_x_cl))
	match_y = match(overlap_G,rownames(mat_y_cl))
	#########
	mat_x_cl_s = mat_x_cl[match_x,]
	mat_y_cl_s = mat_y_cl[match_y,]
	##########
	all.equal(rownames(mat_x_cl_s),rownames(mat_y_cl_s))
	########## Next we will add cell meta #####
	cell_meta_x = x@meta.data[,c('tissue','celltype')]
	cell_meta_x$cell_id = rownames(cell_meta_x)
	##########
	cell_meta_y = y@meta.data[,c('tissue','celltype')]
	cell_meta_y$cell_id = rownames(cell_meta_y)
	##########
	cell_meta_x$batch = batch_list[1]
	cell_meta_y$batch = batch_list[2]
	##########
	cell_meta_x$celltype = paste0('sample_',cell_meta_x$celltype)
	cell_meta_y$celltype = paste0('back_',cell_meta_y$celltype)
	##########
	mat_combined = cbind(mat_x_cl_s,mat_y_cl_s)
	cell_meta_combined = rbind(cell_meta_x,cell_meta_y)
	##########
	all.equal(colnames(mat_combined),cell_meta_combined$cell_id)
	##########
	mat_file_name = paste0(tag,"expression_matrix.mtx")
	cell_file_name = paste0(tag,"cell_metadata.csv")
	gene_file_name = paste0(tag,"gene_metadata.csv")
	#########
	library(Seurat)
	library(Matrix)
	writeMM(Matrix::t(mat_combined), file = mat_file_name, row.names = TRUE)
	write.csv(cell_meta_combined, file = cell_file_name, row.names = TRUE)
	write.csv(rownames(mat_combined), file = gene_file_name, row.names = TRUE)
	#########
}

Step1_merge_sample_cl_with_back(file_list,i_index)

##### then we will write the excel files for this file #####
##### forget these #########################################

Step1_merge_sample_cl_with_back_Lite <- function(file_list,i_index){
	######## return will be update the file_list file ##########
	######## loop each samples ########
	for(i in i_index){
		print(i)
		##### "Folder" #####
		folder = file_list$Folder[i]
		##### setwd ########
		setwd(folder)
		##### TAG ##########
		TAG = file_list$Background[i]
		#####
		tag = Merge_datasets_Lite(folder,TAG)
		#####
		file_list$TAG[i] = tag
	}
	###########
	return(file_list)
}

file_list_new <- Step1_merge_sample_cl_with_back_Lite(file_list,i_index)

library(writexl)

setwd("/zp1/data/plyu3/CellAnn_final_check")

write_xlsx(file_list_new, path = "check_list3_update1.xlsx")

####### 
####### Next is the python piplines      ###########
####### Input is file and the filter tag ###########
####### Input is an excel file, and a filter tag ! #
#######

####### then go for a loop for each datasets ######
####### Output these results ######################
####### python read excel then loop then a simple script #####

ssh plyu3@omb2.onc.jhmi.edu
U[9C20&&

conda activate scvi-env
python

import pandas as pd
import os

file_list_path = "/zp1/data/plyu3/CellAnn_final_check/check_list3_update1.xlsx"
df = pd.read_excel(file_list_path)

df_cl = df[df['Background'] == 'M_Tabula_Muris']

df_cl.columns

file_need_path_all = df_cl['Folder'].tolist()

####### next process each folder #########

import sys
custom_module_path = '/zp1/data/plyu3/CellAnn_final_check/module'
sys.path.append(custom_module_path)

import cellann_final
import os

for file_need_path in file_need_path_all:
	print(file_need_path)
	#### change the dir now !!!! ####
	os.chdir(file_need_path)
	anndata_obj_name = cellann_final.load_anndata_from_folder_tag(file_need_path)
	anndata_obj = cellann_final.load_anndata_from_folder(file_need_path)
	####
	cellann_final.Process_anndatasets(anndata_obj,anndata_obj_name)


#######
print("All Done!!!")



####### pink ######
####### pink
####### pink
####### pink
#######
####### OK!!! Next we will prepare MCA datasets !!!! #######
####### first find the MCA code !!!! #######################
#######
ssh plyu3@omb2.onc.jhmi.edu
U[9C20&&

conda activate seurat4
R

library(SeuratDisk)
setwd("/zp1/data/plyu3/Altas_add_CellAnn/MCA1.1")

seuratObject <- LoadH5Seurat("MCA1.1_adata.gzip.h5seurat")
seuratObject_Mat = seuratObject[['RNA']]@counts

##### This is the MCL script !!!! ######

library(Seurat)
MCA1.1_seurat <- CreateSeuratObject(seuratObject_Mat)
MCA1.1_seurat$cell_id = colnames(MCA1.1_seurat)

######

setwd("/zp1/data/plyu3/Altas_add_CellAnn/MCA1.1")
data <- readxl::read_excel("MCA1.1_cell_info.xlsx")

m = match(MCA1.1_seurat$cell_id,data$cellnames)

MCA1.1_seurat$tissue = data$tissue[m]
MCA1.1_seurat$stage = data$stage[m]
MCA1.1_seurat$celltype = data$celltype[m]
MCA1.1_seurat$cluster = data$cluster[m]

MCA1.1_seurat$class = paste(MCA1.1_seurat$stage,MCA1.1_seurat$tissue,sep="_")

#######
#######
#######

table(MCA1.1_seurat$celltype)
table(MCA1.1_seurat$tissue)

saveRDS(MCA1.1_seurat,file='MCA1.1_seurat_Aug23')

####### Next merge the tissue and celltype and reduce number of cells #########
#######

setwd("/zp1/data/plyu3/Altas_add_CellAnn/MCA1.1")
MCA1.1_seurat <- readRDS("MCA1.1_seurat_Aug23")


#######
#######

library(Seurat)

head(MCA1.1_seurat@meta.data)

MCA1.1_seurat$index = paste(MCA1.1_seurat$tissue,MCA1.1_seurat$celltype,sep='~~')

table(MCA1.1_seurat$index)

####### cutoff we will set !! ######
#######

altas_seurat = MCA1.1_seurat

check_process_Step_altas2 <- function(altas_seurat){
	######
	###### the index tag for altas_seurat ######
	######
	table_ct = data.frame(table(altas_seurat$index))
	######
	table_ct = table_ct[which(table_ct$Freq > 50),]
	######
	tmp_cells_all = c()
	######
	tmp_mat = altas_seurat[['RNA']]@counts
	######
	tmp_seurat = CreateSeuratObject(tmp_mat)
	tmp_seurat$index = altas_seurat$index
	tmp_seurat$cell_id = colnames(tmp_seurat)
	for(j in 1:length(table_ct$Var1)){
			tmp_ct_name = as.character(table_ct$Var1[j])
			tmp_ct_num = table_ct$Freq[j]
			######
			tmp_ct_seurat = tmp_seurat[,which(tmp_seurat$index == tmp_ct_name)]
			######
			if(tmp_ct_num > 500){
				#### half half ####
				delta = round(tmp_ct_num - 500)/2
				tmp_ct_seurat_cell_tab = tmp_ct_seurat@meta.data[,c('nCount_RNA','cell_id')]
				tmp_ct_seurat_cell_tab = tmp_ct_seurat_cell_tab[order(tmp_ct_seurat_cell_tab$nCount_RNA),]
				####
				cell_index = tmp_ct_seurat_cell_tab$cell_id[c(delta+1):c(length(tmp_ct_seurat_cell_tab$cell_id)-delta)]
				####
				tmp_ct_seurat_sub = tmp_ct_seurat[,which(tmp_ct_seurat$cell_id %in% cell_index == T)]
				tmp_cells_all = c(tmp_cells_all,tmp_ct_seurat_sub$cell_id)
			}
			if(tmp_ct_num < 501){
				tmp_ct_seurat_sub = tmp_ct_seurat
				tmp_cells_all = c(tmp_cells_all,tmp_ct_seurat_sub$cell_id)
			}
			table_ct$Freq_new[j] = dim(tmp_ct_seurat_sub)[2]
	}
	######
	tmp_seurat_new = altas_seurat[,which(altas_seurat$cell_id %in% tmp_cells_all == T)]
	###### new seurat ###
	return(tmp_seurat_new)
}

MCA1.1_seurat_cl = check_process_Step_altas2(MCA1.1_seurat)

####
#### Next we will see how many cells it has !!! #####
####

#### 
####
setwd("/zp1/data/plyu3/CellAnn_final_check")

saveRDS(MCA1.1_seurat_cl,file='MCA1.1_seurat_cl_Aug23')





setwd("/zp1/data/plyu3/CellAnn_final_check")

library(readxl)

data <- data.frame(read_xlsx("check_list3_update1.xlsx"))

data_list <- data
i_index = which(data_list$Background == 'MCA')
file_list  = data_list

Step1_merge_sample_cl_with_back <- function(file_list,i_index){
	######## return will be update the file_list file ##########
	######## loop each samples ########
	for(i in i_index){
		print(i)
		##### "Folder" #####
		folder = file_list$Folder[i]
		##### setwd ########
		setwd(folder)
		##### TAG ##########
		TAG = file_list$Background[i]
		#####
		tag = Merge_datasets(folder,TAG)
		#####
		file_list$TAG[i] = tag
	}
	###########
	return(file_list)
}

Merge_datasets <- function(folder,TAG){
	##########
	setwd(folder)
	##########
	files = list.files()
	##########
	ref_seurat = files[grep("_new_clean$",files)]
	ref_seurat_obj = readRDS(ref_seurat)
	##########
	tag = gsub("_seurat_obj_new_clean","",ref_seurat)
	##########
	k_tmp1 = which(colnames(ref_seurat_obj@meta.data) %in% c('Tissue_detail') == T)
	if(length(k_tmp1) > 0){
		ref_seurat_obj$tissue = ref_seurat_obj$Tissue_detail
	}
	k_tmp2 = which(colnames(ref_seurat_obj@meta.data) %in% c('stage_tissue') == T)
	if(length(k_tmp2) > 0){
		ref_seurat_obj$tissue = ref_seurat_obj$stage_tissue
	}
	##########
	if(TAG == 'M_Tabula_Muris'){
		back_seurat = readRDS("/zp1/data/plyu3/CellAnn_final_check/Test_datasets/droplet_seurat_merge_cl")
		#######
		#######
		tag2 = paste0(tag,"__",TAG)
		batch_list = c("batch_sub","batch_background")
		setwd(folder)
		Output_py_matrix_test(x=ref_seurat_obj,y=back_seurat,batch_list,tag=tag2)
	}
	if(TAG == 'MCA'){
		back_seurat = readRDS("/zp1/data/plyu3/CellAnn_final_check/MCA1.1_seurat_cl_Aug23")
		#######
		#######
		tag2 = paste0(tag,"__",TAG)
		batch_list = c("batch_sub","batch_background")
		setwd(folder)
		Output_py_matrix_test(x=ref_seurat_obj,y=back_seurat,batch_list,tag=tag2)
	}
	######
	return(tag)
}

i_index = 397:437
Step1_merge_sample_cl_with_back(data_list,i_index)

###########
##########
########
######
ssh plyu3@omb2.onc.jhmi.edu
U[9C20&&

conda activate scvi-env

cd /zp1/data/plyu3/CellAnn_final_check

nohup python cellann_final_back_batch2.py &

###############
######## update the HCL datasets !!!! ############
###############



###############
############### OK!!! we will see the HCL datasets !!!! ######
###############
conda activate seurat4
R
library(Seurat)
setwd('/zp1/data/plyu3/Altas_add_CellAnn/MCA1.1/')

load("new_Seurat_list")

###############

head(rownames(new_Seurat_list[[1]])

#### It's the HCL genes #########
#### then we add the information to the dat.txt #####
#### OK!!! let us do it !!! #####
#### add dataset tag to the dat.txt #####

HCL_dat <- read.table("HCL_dat.txt",head=T)

####
####

head(new_Seurat_list[[1]]@meta.data)


"Sample" and the "Celltype"

#####
#####

HCL_merge <- merge(new_Seurat_list[[1]], y = new_Seurat_list[2:99])

##### then we will see what's in the seurat list !!! ######
#####

table(HCL_merge$Celltype)
table(HCL_merge$Sample)

##### 

HCL_merge$celltype = HCL_merge$Celltype
HCL_merge$tissue = HCL_merge$Sample
HCL_merge$cell_id = colnames(HCL_merge)

HCL_merge$index = HCL_merge$celltype
HCL_merge_cl = check_process_Step_altas3(HCL_merge)



check_process_Step_altas3 <- function(altas_seurat){
	######
	###### the index tag for altas_seurat ######
	######
	table_ct = data.frame(table(altas_seurat$index))
	######
	table_ct = table_ct[which(table_ct$Freq > 50),]
	######
	tmp_cells_all = c()
	######
	tmp_mat = altas_seurat[['RNA']]@counts
	######
	tmp_seurat = CreateSeuratObject(tmp_mat)
	tmp_seurat$index = altas_seurat$index
	tmp_seurat$cell_id = colnames(tmp_seurat)
	print(length(table_ct$Var1))
	for(j in 1:length(table_ct$Var1)){
			print(j)
			tmp_ct_name = as.character(table_ct$Var1[j])
			tmp_ct_num = table_ct$Freq[j]
			######
			tmp_ct_seurat = tmp_seurat[,which(tmp_seurat$index == tmp_ct_name)]
			######
			if(tmp_ct_num > 250){
				#### half half ####
				delta = round(tmp_ct_num - 250)/2
				tmp_ct_seurat_cell_tab = tmp_ct_seurat@meta.data[,c('nCount_RNA','cell_id')]
				tmp_ct_seurat_cell_tab = tmp_ct_seurat_cell_tab[order(tmp_ct_seurat_cell_tab$nCount_RNA),]
				####
				cell_index = tmp_ct_seurat_cell_tab$cell_id[c(delta+1):c(length(tmp_ct_seurat_cell_tab$cell_id)-delta)]
				####
				tmp_ct_seurat_sub = tmp_ct_seurat[,which(tmp_ct_seurat$cell_id %in% cell_index == T)]
				tmp_cells_all = c(tmp_cells_all,tmp_ct_seurat_sub$cell_id)
			}
			if(tmp_ct_num < 251){
				tmp_ct_seurat_sub = tmp_ct_seurat
				tmp_cells_all = c(tmp_cells_all,tmp_ct_seurat_sub$cell_id)
			}
			table_ct$Freq_new[j] = dim(tmp_ct_seurat_sub)[2]
	}
	######
	tmp_seurat_new = altas_seurat[,which(altas_seurat$cell_id %in% tmp_cells_all == T)]
	###### new seurat ###
	return(tmp_seurat_new)
}

setwd("/zp1/data/plyu3/CellAnn_final_check")

saveRDS(HCL_merge_cl,file='HCL_merge_cl_Aug23')

########
######## Next we will get merge the matrix !!!! ########
########


setwd("/zp1/data/plyu3/CellAnn_final_check")

library(readxl)

data <- data.frame(read_xlsx("check_list3_update2.xlsx"))

data_list <- data
i_index = which(data_list$Background == 'HCL')
file_list  = data_list

Step1_merge_sample_cl_with_back <- function(file_list,i_index){
	######## return will be update the file_list file ##########
	######## loop each samples ########
	for(i in i_index){
		print(i)
		##### "Folder" #####
		folder = file_list$Folder[i]
		##### setwd ########
		setwd(folder)
		##### TAG ##########
		TAG = file_list$Background[i]
		#####
		tag = Merge_datasets(folder,TAG)
		#####
		file_list$TAG[i] = tag
	}
	###########
	return(file_list)
}

Merge_datasets <- function(folder,TAG){
	##########
	setwd(folder)
	##########
	files = list.files()
	##########
	ref_seurat = files[grep("_new_clean$",files)]
	ref_seurat_obj = readRDS(ref_seurat)
	##########
	tag = gsub("_seurat_obj_new_clean","",ref_seurat)
	##########
	k_tmp1 = which(colnames(ref_seurat_obj@meta.data) %in% c('Tissue_detail') == T)
	if(length(k_tmp1) > 0){
		ref_seurat_obj$tissue = ref_seurat_obj$Tissue_detail
	}
	k_tmp2 = which(colnames(ref_seurat_obj@meta.data) %in% c('stage_tissue') == T)
	if(length(k_tmp2) > 0){
		ref_seurat_obj$tissue = ref_seurat_obj$stage_tissue
	}
	k_tmp3 = which(colnames(ref_seurat_obj@meta.data) %in% c('Celltype') == T)
	if(length(k_tmp3) > 0){
		ref_seurat_obj$celltype = ref_seurat_obj$Celltype
	}
	k_tmp4 = which(colnames(ref_seurat_obj@meta.data) %in% c('Sample') == T)
	if(length(k_tmp4) > 0){
		ref_seurat_obj$tissue = ref_seurat_obj$Sample
	}
	##########
	k_tmp5 = which(colnames(ref_seurat_obj@meta.data) %in% c('tissue') == T)
	if(length(k_tmp5) == 0){
		ref_seurat_obj$tissue = "tissue"
	}
	##########
	if(TAG == 'M_Tabula_Muris'){
		back_seurat = readRDS("/zp1/data/plyu3/CellAnn_final_check/Test_datasets/droplet_seurat_merge_cl")
		#######
		#######
		tag2 = paste0(tag,"__",TAG)
		batch_list = c("batch_sub","batch_background")
		setwd(folder)
		Output_py_matrix_test(x=ref_seurat_obj,y=back_seurat,batch_list,tag=tag2)
	}
	if(TAG == 'MCA' | TAG == 'MCA1'){
		back_seurat = readRDS("/zp1/data/plyu3/CellAnn_final_check/MCA1.1_seurat_cl_Aug23")
		#######
		#######
		tag2 = paste0(tag,"__",TAG)
		batch_list = c("batch_sub","batch_background")
		setwd(folder)
		Output_py_matrix_test(x=ref_seurat_obj,y=back_seurat,batch_list,tag=tag2)
	}
	if(TAG == 'HCL' | TAG == 'HCL1' | TAG == 'HCL2'){
		back_seurat = readRDS("/zp1/data/plyu3/CellAnn_final_check/HCL_merge_cl_Aug23")
		#######
		#######
		tag2 = paste0(tag,"__",TAG)
		batch_list = c("batch_sub","batch_background")
		setwd(folder)
		Output_py_matrix_test(x=ref_seurat_obj,y=back_seurat,batch_list,tag=tag2)
	}
	######
	return(tag)
}

Step1_merge_sample_cl_with_back(data_list,i_index)

######

ssh plyu3@omb2.onc.jhmi.edu
U[9C20&&

conda activate scvi-env

cd /zp1/data/plyu3/CellAnn_final_check

nohup python cellann_final_back_batch3.py &



######
###### let us prepare the HCL1 datasets ########
######
ssh plyu3@omb2.onc.jhmi.edu

U[9C20&&

conda activate seurat4

R

setwd("/zp1/data/plyu3/CellAnn_final_check")

library(readxl)
data <- data.frame(read_xlsx("check_list3_update4.xlsx"))

data_list <- data
i_index = which(data_list$Background == 'HCL1')
file_list  = data_list



Output_py_matrix_test <- function(x,y,batch_list,tag){
	#########
	mat_x = x[['RNA']]@counts
	mat_y = y[['RNA']]@counts
	#########
	overlap_G = rownames(mat_x)[which(rownames(mat_x) %in% rownames(mat_y) == T)]
	#########
	mat_x_cl = mat_x[which(rownames(mat_x) %in% overlap_G == T),]
	mat_y_cl = mat_y[which(rownames(mat_y) %in% overlap_G == T),]
	########
	match_x = match(overlap_G,rownames(mat_x_cl))
	match_y = match(overlap_G,rownames(mat_y_cl))
	#########
	mat_x_cl_s = mat_x_cl[match_x,]
	mat_y_cl_s = mat_y_cl[match_y,]
	##########
	all.equal(rownames(mat_x_cl_s),rownames(mat_y_cl_s))
	########## Next we will add cell meta #####
	cell_meta_x = x@meta.data[,c('tissue','celltype')]
	cell_meta_x$cell_id = rownames(cell_meta_x)
	##########
	cell_meta_y = y@meta.data[,c('tissue','celltype')]
	cell_meta_y$cell_id = rownames(cell_meta_y)
	##########
	cell_meta_x$batch = batch_list[1]
	cell_meta_y$batch = batch_list[2]
	##########
	cell_meta_x$celltype = paste0('sample_',cell_meta_x$celltype)
	cell_meta_y$celltype = paste0('back_',cell_meta_y$celltype)
	##########
	mat_combined = cbind(mat_x_cl_s,mat_y_cl_s)
	cell_meta_combined = rbind(cell_meta_x,cell_meta_y)
	##########
	all.equal(colnames(mat_combined),cell_meta_combined$cell_id)
	##########
	mat_file_name = paste0(tag,"expression_matrix.mtx")
	cell_file_name = paste0(tag,"cell_metadata.csv")
	gene_file_name = paste0(tag,"gene_metadata.csv")
	#########
	print(paste0("dims:",dim(Matrix::t(mat_combined))))
	#########
	library(Seurat)
	library(Matrix)
	writeMM(Matrix::t(mat_combined), file = mat_file_name, row.names = TRUE)
	write.csv(cell_meta_combined, file = cell_file_name, row.names = TRUE)
	write.csv(rownames(mat_combined), file = gene_file_name, row.names = TRUE)
	#########
}

###


data_list_HCL1 <- Step1_merge_sample_cl_with_back(data_list,i_index)

###
ssh plyu3@omb2.onc.jhmi.edu
U[9C20&&

conda activate seurat4

R

setwd("/zp1/data/plyu3/CellAnn_final_check")

library(readxl)
data <- data.frame(read_xlsx("check_list3_update4.xlsx"))

data_list <- data
i_index = which(data_list$Background == 'HCL2')
file_list  = data_list


data_list_HCL2 <- Step1_merge_sample_cl_with_back(data_list,i_index)


####
####
####



ssh plyu3@10.181.57.115
U[9C20&&

conda activate seurat4

R

setwd("/zp1/data/plyu3/CellAnn_final_check")

library(readxl)
data <- data.frame(read_xlsx("check_list3_update4.xlsx"))

data_list <- data
i_index = which(data_list$Background == 'MCA1')
file_list  = data_list


data_list_MCA1 <- Step1_merge_sample_cl_with_back(data_list,i_index)


###
### Next copy all the files to a single folder !!! #####
###

###
###
###



[1] 170
[1] "dims:94366" "dims:298" 

Need revise !!!

[1] 174
[1] "dims:97366" "dims:1972" 

Need revise !!!

[1] 185
[1] "dims:123370" "dims:89"   

Need revise !!! 这个是 Mouse !!!

###
### we will check these 3 samples !!!! ###
###


### 下一部 copy #####
### create a folder and copy ####
###

###
###
###

cd /zp1/data/plyu3/CellAnn_final_check

###
###
###

### cp HCL1 and HCL2 to the old server ###
###


exclude_index = c(170,174,185)

###
###

conda activate seurat4
R

setwd("/zp1/data/plyu3/CellAnn_final_check")

library(readxl)

data <- data.frame(read_xlsx("check_list3_update4.xlsx"))

data_list <- data
i_index = which(data_list$Background %in% c('HCL1','HCL2') == T)
file_list  = data_list

###
i_index = i_index[which(i_index %in% exclude_index == F)]
###
###
###
i = i_index[1]

copy_sample_cl <- function(file_list,i_index){
	######## return will be update the file_list file ##########
	######## loop each samples ########
	for(i in i_index){
		print(i)
		##### "Folder" #####
		folder = file_list$Folder[i]
		##### setwd ########
		setwd(folder)
		##### TAG ##########
		TAG = file_list$Background[i]
		#####
		setwd(folder)
		##########
		files = list.files()
		##########
		ref_seurat = files[grep("_new_clean$",files)]
		##########
		tag = gsub("_seurat_obj_new_clean","",ref_seurat)
		#####
		new_folder = paste0("/zp1/data/plyu3/CellAnn_final_check/HCL12_copy/","NO",i,'__',tag)
		#####
		command = paste("mkdir",new_folder)
		print(command)
		system(command,wait=T)
		#####
		mat_file_name = paste0(tag,'__',TAG,"expression_matrix.mtx")
		cell_file_name = paste0(tag,'__',TAG,"cell_metadata.csv")
		gene_file_name = paste0(tag,'__',TAG,"gene_metadata.csv")
		#####
		command1 = paste("cp",mat_file_name,new_folder)
		command2 = paste("cp",cell_file_name,new_folder)
		command3 = paste("cp",gene_file_name,new_folder)
		######
		system(command1,wait=F)
		system(command2,wait=F)
		system(command3,wait=F)
		print(i)
	}
	###########
	print("Done!")
}

file_list2 <- copy_sample_cl(file_list,i_index)

#####
##### then we will copy the folder to the old server !!! #####
#####

scp -r HCL12_copy plyu3@10.181.57.113:/zp1/data/plyu3


#####

ssh plyu3@10.181.57.113
njd$rft1

#####

#####
conda env list
conda activate scvi-env

#####
##### on the old server #####
#####
#####

copy out the finished samples ！！！！

#####
#####
#####
#####

conda activate Signac2

R

#####



ssh plyu3@10.181.57.113
njd$rft1


setwd("/zp1/data/plyu3/HCL12_copy")

files = list.files()

for(i in 1:length(files)){
	########
	files_sub = paste0("/zp1/data/plyu3/HCL12_copy/",files[i])
	########
	files_sub_files = list.files(files_sub)
	########
	if(length(files_sub_files) > 7){
		command = paste("mv", files_sub, "/zp1/data/plyu3/HCL12_copy_success/")
		print(command)
		system(command,wait=F)
	}

}


list.files("/zp1/data/plyu3/HCL12_copy/NO292__22-year-old_human_stage")



ssh plyu3@10.181.57.113
njd$rft1

conda activate scvi-env

cd /zp1/data/plyu3/HCL12_code

nohup python cellann_final_back_batch3_oldserver.py &


############
############

HCL1
HCL2

M_Tabula_Muris
MCA


MCA1 not work !!!!
#####
#####

we will copy out MCA1 samples to output folders !!!! ########
#####

ssh plyu3@10.181.57.113
njd$rft1

#####

ssh plyu3@10.181.57.115
U[9C20&&


conda activate seurat4
R

setwd("/zp1/data/plyu3/CellAnn_final_check")

library(readxl)

data <- data.frame(read_xlsx("check_list3_update5.xlsx"))

data_list <- data
i_index = which(data_list$Background %in% c('MCA1') == T)
file_list  = data_list

exclude_index = c(170,174,185)

###
i_index = i_index[which(i_index %in% exclude_index == F)]
###
###
###
i = i_index[1]

copy_sample_cl <- function(file_list,i_index){
	######## return will be update the file_list file ##########
	######## loop each samples ########
	for(i in i_index){
		print(i)
		##### "Folder" #####
		folder = file_list$Folder[i]
		##### setwd ########
		setwd(folder)
		##### TAG ##########
		TAG = file_list$Background[i]
		#####
		setwd(folder)
		##########
		files = list.files()
		##########
		ref_seurat = files[grep("_new_clean$",files)]
		##########
		tag = gsub("_seurat_obj_new_clean","",ref_seurat)
		#####
		new_folder = paste0("/zp1/data/plyu3/CellAnn_final_check/MCA1_copy/","NO",i,'__',tag)
		#####
		command = paste("mkdir",new_folder)
		print(command)
		system(command,wait=T)
		#####
		mat_file_name = paste0(tag,'__',TAG,"expression_matrix.mtx")
		cell_file_name = paste0(tag,'__',TAG,"cell_metadata.csv")
		gene_file_name = paste0(tag,'__',TAG,"gene_metadata.csv")
		#####
		command1 = paste("cp",mat_file_name,new_folder)
		command2 = paste("cp",cell_file_name,new_folder)
		command3 = paste("cp",gene_file_name,new_folder)
		######
		system(command1,wait=F)
		system(command2,wait=F)
		system(command3,wait=F)
		print(i)
	}
	###########
	print("Done!")
}

file_list2 <- copy_sample_cl(file_list,i_index)

#####
##### next run command !!! ######
#####

mkdir /zp1/data/plyu3/CellAnn_final_check/MCA1_code/

#####
conda env list

conda activate scvi-env

#####

cd /zp1/data/plyu3/CellAnn_final_check/MCA1_code

nohup python cellann_final_back_batch4_newserver.py &

#####
##### OK!!! 搞定 ！！！ #####
#####


ssh plyu3@10.181.57.115
U[9C20&&

mkdir /zp1/data/plyu3/CellAnn_final_check/MCA1_copy_success/
#####
conda activate seurat4

setwd("/zp1/data/plyu3/CellAnn_final_check/MCA1_copy/")

files = list.files()

for(i in 1:length(files)){
	########
	files_sub = paste0("/zp1/data/plyu3/CellAnn_final_check/MCA1_copy/",files[i])
	########
	files_sub_files = list.files(files_sub)
	########
	if(length(files_sub_files) > 7){
		command = paste("mv", files_sub, "/zp1/data/plyu3/CellAnn_final_check/MCA1_copy_success/")
		print(command)
		system(command,wait=F)
	}

}


list.files("/zp1/data/plyu3/HCL12_copy/NO292__22-year-old_human_stage")


######
######


ssh plyu3@10.181.57.115
U[9C20&&

conda activate seurat4
R

setwd("/zp1/data/plyu3/CellAnn_final_check")

library(readxl)

data <- data.frame(read_xlsx("check_list3_update5.xlsx"))

exclude_index = c(170,174,185)

data[exclude_index,]

######
170 ##
######

index = 170 

folder = data$Folder[index]
files = list.files(folder)
setwd(folder)
matrix = Matrix::readMM("pmid32728211__MCA1expression_matrix.mtx")
cells = read.table("pmid32728211__MCA1gene_metadata.csv")


ref_seurat = files[grep("_seurat_obj$",files)]

library(Seurat)
ref_seurat_obj = readRDS(ref_seurat)


matrix = read.table("exprMatrix (38).tsv",sep='\t')

only300genes OK!!!! #############

###### Next sample !!!! #########

index = 174

folder = data$Folder[index]
files = list.files(folder)


setwd(folder)

ref_seurat = files[grep("_seurat_obj$",files)]
library(Seurat)
ref_seurat_obj = readRDS(ref_seurat)

only 2000 genes !!!! 

setwd(folder)
matrix = Matrix::readMM("pmid33448928__MCA1expression_matrix.mtx")
cells = read.table("pmid33448928__MCA1gene_metadata.csv")

only1972genes OK!!!! #############



##### Next sample !!!!! #########

index = 185

folder = data$Folder[index]
files = list.files(folder)
setwd(folder)

matrix = Matrix::readMM("pmid32413319__HCL2expression_matrix.mtx")

setwd(folder)

ref_seurat = files[grep("_seurat_obj$",files)]

library(Seurat)
ref_seurat_obj = readRDS(ref_seurat)

#### this sample should integrate with MCA ###

data[185,]

#### we will change this information !!! #####
#### to MCA1 ####



setwd("/zp1/data/plyu3/CellAnn_final_check")

library(readxl)

data <- data.frame(read_xlsx("check_list3_update5.xlsx"))

data_list <- data
i_index = 185
file_list  = data_list

Step1_merge_sample_cl_with_back <- function(file_list,i_index){
	######## return will be update the file_list file ##########
	######## loop each samples ########
	for(i in i_index){
		print(i)
		##### "Folder" #####
		folder = file_list$Folder[i]
		##### setwd ########
		setwd(folder)
		##### TAG ##########
		TAG = file_list$Background[i]
		#####
		tag = Merge_datasets(folder,TAG)
		#####
		file_list$TAG[i] = tag
	}
	###########
	return(file_list)
}

Merge_datasets <- function(folder,TAG){
	##########
	setwd(folder)
	##########
	files = list.files()
	##########
	ref_seurat = files[grep("_new_clean$",files)]
	ref_seurat_obj = readRDS(ref_seurat)
	##########
	tag = gsub("_seurat_obj_new_clean","",ref_seurat)
	##########
	k_tmp1 = which(colnames(ref_seurat_obj@meta.data) %in% c('Tissue_detail') == T)
	if(length(k_tmp1) > 0){
		ref_seurat_obj$tissue = ref_seurat_obj$Tissue_detail
	}
	k_tmp2 = which(colnames(ref_seurat_obj@meta.data) %in% c('stage_tissue') == T)
	if(length(k_tmp2) > 0){
		ref_seurat_obj$tissue = ref_seurat_obj$stage_tissue
	}
	k_tmp3 = which(colnames(ref_seurat_obj@meta.data) %in% c('Celltype') == T)
	if(length(k_tmp3) > 0){
		ref_seurat_obj$celltype = ref_seurat_obj$Celltype
	}
	k_tmp4 = which(colnames(ref_seurat_obj@meta.data) %in% c('Sample') == T)
	if(length(k_tmp4) > 0){
		ref_seurat_obj$tissue = ref_seurat_obj$Sample
	}
	##########
	k_tmp5 = which(colnames(ref_seurat_obj@meta.data) %in% c('tissue') == T)
	if(length(k_tmp5) == 0){
		ref_seurat_obj$tissue = "tissue"
	}
	##########
	if(TAG == 'M_Tabula_Muris'){
		back_seurat = readRDS("/zp1/data/plyu3/CellAnn_final_check/Test_datasets/droplet_seurat_merge_cl")
		#######
		#######
		tag2 = paste0(tag,"__",TAG)
		batch_list = c("batch_sub","batch_background")
		setwd(folder)
		Output_py_matrix_test(x=ref_seurat_obj,y=back_seurat,batch_list,tag=tag2)
	}
	if(TAG == 'MCA' | TAG == 'MCA1'){
		back_seurat = readRDS("/zp1/data/plyu3/CellAnn_final_check/MCA1.1_seurat_cl_Aug23")
		#######
		#######
		tag2 = paste0(tag,"__",TAG)
		batch_list = c("batch_sub","batch_background")
		setwd(folder)
		Output_py_matrix_test(x=ref_seurat_obj,y=back_seurat,batch_list,tag=tag2)
	}
	if(TAG == 'HCL' | TAG == 'HCL1' | TAG == 'HCL2'){
		back_seurat = readRDS("/zp1/data/plyu3/CellAnn_final_check/HCL_merge_cl_Aug23")
		#######
		#######
		tag2 = paste0(tag,"__",TAG)
		batch_list = c("batch_sub","batch_background")
		setwd(folder)
		Output_py_matrix_test(x=ref_seurat_obj,y=back_seurat,batch_list,tag=tag2)
	}
	######
	return(tag)
}

Step1_merge_sample_cl_with_back(data_list,i_index)


cp -r /zp1/data/plyu3/SCP_old/pmid32413319/  /zp1/data/plyu3/CellAnn_final_check/MCA1_copy/



#### #### ####
#### #### ####
#### #### ####

ssh plyu3@10.181.57.115
U[9C20&&

conda activate seurat4
R


setwd("/zp1/data/plyu3/CellAnn_final_check")
library(readxl)
data <- data.frame(read_xlsx("check_list3_update5.xlsx"))

exclude_index = c(170,174,185)

data[170,]
data[174,]

mkdir /zp1/data/plyu3/CellAnn_final_check/MCA1_copy_short

cp -r /zp1/data/plyu3/UCSC_old/pmid32728211/  /zp1/data/plyu3/CellAnn_final_check/MCA1_copy_short/
cp -r /zp1/data/plyu3/UCSC_old/pmid33448928/  /zp1/data/plyu3/CellAnn_final_check/MCA1_copy_short/


#### #### ####
#### #### ####
#### #### ####

python cellann_final_back_batch5_short_newserver.py

mv /zp1/data/plyu3/CellAnn_final_check/MCA1_copy_short/pmid32728211 /zp1/data/plyu3/CellAnn_final_check/MCA1_copy_success/

mv /zp1/data/plyu3/CellAnn_final_check/MCA1_copy_short/pmid33448928 /zp1/data/plyu3/CellAnn_final_check/MCA1_copy_success/

mv /zp1/data/plyu3/CellAnn_final_check/MCA1_copy/pmid32413319 /zp1/data/plyu3/CellAnn_final_check/MCA1_copy_success/

####
#### Next we will go to the old server to see the remaining datasets ########
#### first we will process one sample to see the reason ####


ssh plyu3@10.181.57.113
njd$rft1


conda activate scvi-env

####
####
####

python

file_list_path = "/zp1/data/plyu3/HCL12_copy/"

import pandas as pd
import os

def list_subfolder_paths(folder_path):
    subfolder_paths = [os.path.join(folder_path, f) for f in os.listdir(folder_path) if os.path.isdir(os.path.join(folder_path, f))]
    return subfolder_paths

subfolders = list_subfolder_paths(file_list_path)


import sys
custom_module_path = '/zp1/data/plyu3/HCL12_code/'
sys.path.append(custom_module_path)


import cellann_final
import os

file_need_path_all = subfolders

file_need_path = file_need_path_all[3]

os.chdir(file_need_path)

anndata_obj_name = cellann_final.load_anndata_from_folder_tag(file_need_path)

anndata_obj = cellann_final.load_anndata_from_folder(file_need_path)

cellann_final.Process_anndatasets(anndata_obj,anndata_obj_name)

import subprocess
import argparse
import os
import re
import pandas as pd
import scanpy as sc
import scvi
import anndata
import scipy.io as sio
import copy

sc.pp.highly_variable_genes(
        anndata_obj,
        flavor="cell_ranger",
        n_top_genes=3000,
        layer="counts",
        subset=True
)


scvi.model.SCVI.setup_anndata(anndata_obj, layer="counts", batch_key="batch")
vae = scvi.model.SCVI(anndata_obj, n_layers=2, n_latent=30, gene_likelihood="nb")
vae.train()


#####################
##################### transfer good samples to 
##################### 

ssh plyu3@10.181.57.115
U[9C20&&

###################### 
######################
######################

ssh plyu3@10.181.57.113
njd$rft1

conda activate scvi-env

####
####
####

python

file_list_path = "/zp1/data/plyu3/HCL12_copy/"

conda activate Signac2

#####
#####
#####

setwd("/zp1/data/plyu3/HCL12_copy/")

setwd("NO110__pmid34035279_Fetal")

files = list.files()

mat = Matrix::readMM("pmid34035279_Fetal__HCL1expression_matrix.mtx")

summary(Matrix::rowSums(mat))
summary(Matrix::colSums(mat))

gene = read.table("pmid34035279_Fetal__HCL1gene_metadata.csv",sep=',',header=T)
cell = read.table("pmid34035279_Fetal__HCL1cell_metadata.csv",sep=',',header=T)


cell_new_index = sample(1:dim(cell)[1],50000)

cell_new = cell[cell_new_index,]
mat_new = mat[cell_new_index,]

k = mat_new < 0 
mat_new[k] = 0

Matrix::writeMM(mat_new,file="pmid34035279_Fetal__HCL1expression_matrix.mtx")

write.csv(cell_new, file = "pmid34035279_Fetal__HCL1cell_metadata.csv", row.names = FALSE)

#######
#######
#######

setwd("/zp1/data/plyu3/HCL12_copy/NO76__pmid32049002")

files = list.files()

mat = Matrix::readMM("pmid32049002__HCL1expression_matrix.mtx")

summary(Matrix::rowSums(mat))
summary(Matrix::colSums(mat))

gene = read.table("pmid32049002__HCL1gene_metadata.csv",sep=',',header=T)
cell = read.table("pmid32049002__HCL1cell_metadata.csv",sep=',',header=T)


cell_new_index = sample(1:dim(cell)[1],50000)

cell_new = cell[cell_new_index,]
mat_new = mat[cell_new_index,]

k = mat_new < 0 
mat_new[k] = 0

Matrix::writeMM(mat_new,file="pmid32049002__HCL1expression_matrix.mtx")

write.csv(cell_new, file = "pmid32049002__HCL1cell_metadata.csv", row.names = FALSE)

###########
###########

target_folder = "/zp1/data/plyu3/HCL12_copy_success"
from_folder = "/zp1/data/plyu3/HCL12_copy"

###########
###########
	#########
	setwd(from_folder)
	##########
	sub_folder = list.files()
	##########
	for(j in 1:length(sub_folder)){
		tmp = sub_folder[j]
		command = paste("mv",tmp,"/zp1/data/plyu3/HCL12_copy_success")
		system(command,wait=F)
	}

############
############ Next from our old server to new server #######
############

scp -r /zp1/data/plyu3/HCL12_copy_success plyu3@10.181.57.115:/zp1/data/plyu3/CellAnn_final_check/
U[9C20&&

#############
#############
#############

find the background files and copy them into a new folder：

##############
##############


ssh plyu3@10.181.57.115
U[9C20&&

conda activate seurat4
R


setwd("/zp1/data/plyu3/CellAnn_final_check")
library(readxl)
data <- data.frame(read_xlsx("check_list3_update5.xlsx"))

table(data$Background)

#####
##### we will make a new folder to copy these background files !!! ########
#####

index = c("HCL1","HCL2")

target_folder = "/zp1/data/plyu3/CellAnn_final_check/background_merge"

#####
##### 

mkdir /zp1/data/plyu3/CellAnn_final_check/background_merge
data$BackTAG = 'NotFind!'

index = c("HCL1","HCL2")

index = c("MCA1")

index = c("HCL","MCA")

Copy_background_file <- function(data,index){
	#########
	if(index[1] %in% c("HCL1","HCL2") == T){
		dat_cl = data[which(data$Background %in% index == T),]
		########
		from_folder = "/zp1/data/plyu3/CellAnn_final_check/HCL12_copy_success"
		########
		setwd(from_folder)
		########
		dat_cl$BackTAG = "Notfind!"
		########
		for(j in 1:length(dat_cl$PMID)){
			tmp_tag = paste0("NO",rownames(dat_cl)[j],"__")
			#########
			tmp_folder_list = list.files(from_folder)
			#########
			k = grep(tmp_tag,tmp_folder_list)
			########
			if(length(k) == 1){
				dat_cl$BackTAG[j] = tmp_folder_list[k]
				####### cp the folder to a new folder ###################
				command = paste("cp -r",tmp_folder_list[k],target_folder)
				print(command)
				#######
				system(command,wait=F)
			}
		}
		###
		###
		k2 = which(data$Background %in% index == T)
		data$BackTAG[k2] = dat_cl$BackTAG
	}
	##############
	if(index %in% c("MCA1") == T){
		dat_cl = data[which(data$Background %in% index == T),]
		########
		from_folder = "/zp1/data/plyu3/CellAnn_final_check/MCA1_copy_success"
		########
		setwd(from_folder)
		########
		dat_cl$BackTAG = "Notfind!"
		########
		for(j in 1:length(dat_cl$PMID)){
			tmp_tag = paste0("NO",rownames(dat_cl)[j],"__")
			#########
			tmp_folder_list = list.files(from_folder)
			#########
			k = grep(tmp_tag,tmp_folder_list)
			########
			if(length(k) == 1){
				dat_cl$BackTAG[j] = tmp_folder_list[k]
				####### cp the folder to a new folder ###################
				command = paste("cp -r",tmp_folder_list[k],target_folder)
				print(command)
				#######
				system(command,wait=T)
			}
		}
		###
		###
		k2 = which(data$Background %in% index == T)
		data$BackTAG[k2] = dat_cl$BackTAG
	}
	###############
	if(index %in% c("M_Tabula_Muris") == T){
		dat_cl = data[which(data$Background %in% index == T),]
		########
		########
		dat_cl$BackTAG = "Notfind!"
		########
		for(j in 1:length(dat_cl$PMID)){
			tmp_tag = paste0("NO",rownames(dat_cl)[j],"__",dat_cl$PMID[j])
			#########
			files_tmp = list.files(dat_cl$Folder[j])
			#########
			k = grep("_backmergeCorrect_",files_tmp)
			########
			if(length(k) > 0){
				dat_cl$BackTAG[j] = tmp_tag
				####### cp the folder to a new folder ###################
				command = paste0("cp -r ",dat_cl$Folder[j]," ",target_folder,"/",tmp_tag)
				#######
				system(command,wait=F)
			}
		}
		###
		###
		k2 = which(data$Background %in% index == T)
		data$BackTAG[k2] = dat_cl$BackTAG
	}
	#############
	if(index[1] %in% c("HCL","MCA") == T){
		dat_cl = data[which(data$Background %in% index == T),]
		########
		########
		dat_cl$BackTAG = "Notfind!"
		########
		for(j in 1:length(dat_cl$PMID)){
			tmp_tag = paste0("NO",rownames(dat_cl)[j],"__",dat_cl$PMID[j])
			#########
			files_tmp = list.files(dat_cl$Folder[j])
			#########
			k = grep("_backmergeCorrect_",files_tmp)
			########
			if(length(k) > 0){
				dat_cl$BackTAG[j] = tmp_tag
				####### cp the folder to a new folder ###################
				command = paste0("cp -r ",dat_cl$Folder[j]," ",target_folder,"/",tmp_tag)
				print(command)
				#######
				system(command,wait=T)
			}
		}
		###
		###
		k2 = which(data$Background %in% index == T)
		data$BackTAG[k2] = dat_cl$BackTAG
	}

}


setwd("/zp1/data/plyu3/CellAnn_final_check")
save(data,file='data_process1')


####
grep("33448928",dat_cl$PMID)
####


ssh plyu3@10.181.57.115
U[9C20&&

conda activate seurat4
R

setwd("/zp1/data/plyu3/CellAnn_final_check")

####
####

load("data_process1")

data$BackTAG_stats = "No"

for(i in 1:length(data$BackTAG)){
	########
	print(i)
	########
	setwd("/zp1/data/plyu3/CellAnn_final_check/background_merge")
	########
	tmp = paste0("/zp1/data/plyu3/CellAnn_final_check/background_merge/",data$BackTAG[i])
	########
	files = list.files(tmp)
	index = grep("_backmergeCorrect",files)
	########
	if(length(index) == 4){
		data$BackTAG_stats[i] = "Yes"
	}
}

k = which(data$BackTAG_stats == "No")

table(data$Background[k])

####
#### 需要把上面的值重新run以下 ###
####

#### find markers for each samples ##################
#### 先在老的服务器上面试一下 ###########################
####



#### 
####

ssh plyu3@10.181.57.113
njd$rft1

conda activate Signac2

cd /zp1/data/plyu3/HCL12_copy_success

folder_list = list.files("/zp1/data/plyu3/HCL12_copy_success")
folder_list = paste0("/zp1/data/plyu3/HCL12_copy_success/",folder_list)

library(parallel)

cl <- makeCluster(15)

results <- parLapply(cl,folder_list,Prepare_Seurat_file_in_the_folder_BACK_STEP2)

stopCluster(cl)


input_folder = "/zp1/data/plyu3/HCL12_copy_success/NO81__pmid32123174"


runDEGs_Ref <- function(Seurat_Obj,method='COSG',idents='celltype',num_of_genes = 100){
	Idents(Seurat_Obj) = idents
	#######
	library(COSG)
	#######
	if(method == 'COSG'){
		marker_cosg <- cosg(
 				Seurat_Obj,
 				groups=c('all'),
 				assay='RNA',
 				slot='data',
 				mu=1,
 				n_genes_user=num_of_genes)
		res = marker_cosg$names
	}
	#######
	#######
	return(res)
}

######

Prepare_Seurat_file_in_the_folder_BACK_STEP2 <- function(input_folder){
	#########
	source("/zp1/data/plyu3/HCL12_code/background_prepare.R")
	#########
	library(Seurat)
	##### we first go into the folder ######
	setwd(input_folder)
	##### 'Seurat_files_exists:' #####
	files = list.files()
	#####
	##### searching seurat files ########
	##### 
	k = grep("_backmergeCorrect.mtx$",files)
	#####
	#########
	seurat_file = files[k]
	library(Matrix)
	seurat_obj_Mat <- readMM(seurat_file)
	seurat_obj_Mat <- round(seurat_obj_Mat*1e5)
	seurat_obj_Mat <- t(seurat_obj_Mat)
	########
	cell_file = files[grep("_backmergeCorrect_Cells.csv",files)]
	seurat_obj_cell <- read.table(cell_file,sep=',',header=T)
	colnames(seurat_obj_Mat) <- seurat_obj_cell$cell_id
	gene_file = files[grep("_backmergeCorrect_Genes.csv",files)]
	seurat_obj_gene <- read.table(gene_file,sep=',',header=T)
	rownames(seurat_obj_Mat) <- seurat_obj_gene$gene_name
	#########
	######### Performing log-normalization ###########
	##### first we convert matrix to counts ##########
	seurat_obj <- CreateSeuratObject(seurat_obj_Mat)
	seurat_obj@meta.data = cbind(seurat_obj@meta.data,seurat_obj_cell)
	seurat_obj <- NormalizeData(seurat_obj)
	#####
	head(colSums(seurat_obj[['RNA']]@counts))
	##### bg-Markers #####
	background_marker = runDEGs_Ref(seurat_obj,method='COSG',idents='leiden',num_of_genes=50)
	##### Next is the Avg Mat ##########
	##### first we will calculate the cluster Avg Mat ##########
	#####
	background_avg = CellAnn_Avg_Mat(seurat_obj[['RNA']]@counts,seurat_obj$leiden)
	##### background_avg ###################
	background_ref_avg = CellAnn_Avg_Mat_ref(background_avg,seurat_obj_cell)
	#####
	##### save background_marker #####
	##### save background_avg ########
	##### save background_ref_avg ####
	files_tag = gsub("_backmergeCorrect_Cells.csv","",cell_file)
	saveRDS(background_marker,file=paste0(files_tag,"_bg_marker"))
	saveRDS(background_avg,file=paste0(files_tag,"_bg_avg_mat"))
	saveRDS(background_ref_avg,file=paste0(files_tag,"_ref_bg_avg_mat"))
	#####
	print("Finished !!!")
}

#########################
#########################





#########################
#########################

CellAnn_Avg_Mat <- function(data_mat,data_cluster,scale_factor=10000){
	######
	tag_cluster = unname(data_cluster)
	tag_cluster_level = levels(as.factor(tag_cluster))
	###### normalized back datasets ######
	print(paste('Sums:',head(colSums(data_mat[,c(1:2)]))))
	###### data_mat is 1e5 normalize #######
	merge_mat = c()
	for(i in 1:length(tag_cluster_level)){
		index = which(data_cluster %in% tag_cluster_level[i] == T)
		index_mat = data_mat[,index]
		######
		index_sum = rowSums(index_mat)
		######
		merge_mat = c(merge_mat,index_sum)
	}
	###
	merge_mat = matrix(merge_mat,nrow=dim(data_mat)[1])
	###
	rownames(merge_mat) = rownames(data_mat)
	colnames(merge_mat) = tag_cluster_level
	### colSums(merge_mat)
	scale = colSums(merge_mat)/scale_factor
	merge_mat = sweep(merge_mat,2,scale,FUN='/')
	### default norm ####
	merge_mat = round(log(merge_mat+1),3)
	return(merge_mat)
	### return is a log transformed matrix ####
}

#######
#######

CellAnn_Avg_Mat_ref <- function(background_avg,seurat_obj_cell){
	########################
	### built a matrix #####
	########################
	ref_celltype = table(seurat_obj_cell$celltype[which(seurat_obj_cell$batch == "batch_sub")])
	########################
	matrix_Wb = matrix(0,nrow=length(names(ref_celltype)),ncol=dim(background_avg)[2])
	#######
	rownames(matrix_Wb) <- names(ref_celltype)
	colnames(matrix_Wb) <- colnames(background_avg)
	#######
	for(i in 1:dim(matrix_Wb)[1]){
		for(j in 1:dim(matrix_Wb)[2]){
			tmp_i = rownames(matrix_Wb)[i]
			tmp_j = colnames(matrix_Wb)[j]
			#####
			k = which(seurat_obj_cell$celltype == tmp_i & seurat_obj_cell$leiden == tmp_j)
			matrix_Wb[i,j] = length(k)
		}
	}
	########
	matrix_Wb = sweep(matrix_Wb,1,rowSums(matrix_Wb),FUN='/')
	matrix_Wb = round(matrix_Wb,3)
	matrix_Wb = t(matrix_Wb)
	########
	######## OK!!! Next !!!! #######
	########
	Eb = as.matrix(background_avg)
	########
	Res_mat = Eb %*% matrix_Wb
	########
	########
	return(Res_mat)
}


###### MCA1 ######

ssh plyu3@10.181.57.115
U[9C20&&

conda activate seurat4
R

setwd("/zp1/data/plyu3/CellAnn_final_check")

folder_list = list.files("/zp1/data/plyu3/CellAnn_final_check/MCA1_copy_success")
folder_list = paste0("/zp1/data/plyu3/CellAnn_final_check/MCA1_copy_success/",folder_list)

Prepare_Seurat_file_in_the_folder_BACK_STEP2 <- function(input_folder){
	#########
	source("/zp1/data/plyu3/CellAnn_final_check/MCA1_code/background_prepare.R")
	#########
	library(Seurat)
	##### we first go into the folder ######
	setwd(input_folder)
	##### 'Seurat_files_exists:' #####
	files = list.files()
	#####
	##### searching seurat files ########
	##### 
	k = grep("_backmergeCorrect.mtx$",files)
	#####
	#########
	seurat_file = files[k]
	library(Matrix)
	seurat_obj_Mat <- readMM(seurat_file)
	seurat_obj_Mat <- round(seurat_obj_Mat*1e5)
	seurat_obj_Mat <- t(seurat_obj_Mat)
	########
	cell_file = files[grep("_backmergeCorrect_Cells.csv",files)]
	seurat_obj_cell <- read.table(cell_file,sep=',',header=T)
	colnames(seurat_obj_Mat) <- seurat_obj_cell$cell_id
	gene_file = files[grep("_backmergeCorrect_Genes.csv",files)]
	seurat_obj_gene <- read.table(gene_file,sep=',',header=T)
	rownames(seurat_obj_Mat) <- seurat_obj_gene$gene_name
	#########
	######### Performing log-normalization ###########
	##### first we convert matrix to counts ##########
	seurat_obj <- CreateSeuratObject(seurat_obj_Mat)
	seurat_obj@meta.data = cbind(seurat_obj@meta.data,seurat_obj_cell)
	seurat_obj <- NormalizeData(seurat_obj)
	#####
	head(colSums(seurat_obj[['RNA']]@counts))
	##### bg-Markers #####
	background_marker = runDEGs_Ref(seurat_obj,method='COSG',idents='leiden',num_of_genes=50)
	##### Next is the Avg Mat ##########
	##### first we will calculate the cluster Avg Mat ##########
	#####
	background_avg = CellAnn_Avg_Mat(seurat_obj[['RNA']]@counts,seurat_obj$leiden)
	##### background_avg ###################
	background_ref_avg = CellAnn_Avg_Mat_ref(background_avg,seurat_obj_cell)
	#####
	##### save background_marker #####
	##### save background_avg ########
	##### save background_ref_avg ####
	files_tag = gsub("_backmergeCorrect_Cells.csv","",cell_file)
	saveRDS(background_marker,file=paste0(files_tag,"_bg_marker"))
	saveRDS(background_avg,file=paste0(files_tag,"_bg_avg_mat"))
	saveRDS(background_ref_avg,file=paste0(files_tag,"_ref_bg_avg_mat"))
	#####
	print("Finished !!!")
}

library(parallel)

cl <- makeCluster(25)

results <- parLapply(cl,folder_list,Prepare_Seurat_file_in_the_folder_BACK_STEP2)

stopCluster(cl)



setwd("/zp1/data/plyu3/CellAnn_final_check")
library(readxl)
data <- data.frame(read_xlsx("check_list3_update5.xlsx"))

#####
table(data$Background)
#####

index = c("HCL","MCA","M_Tabula_Muris")
dat_cl = data[which(data$Background %in% index == T),]


dat_cl

folder_list = dat_cl$Folder

library(parallel)

cl <- makeCluster(30)

results <- parLapply(cl,folder_list,Prepare_Seurat_file_in_the_folder_BACK_STEP2)

stopCluster(cl)

##########
##########
##########



ssh plyu3@10.181.57.113
njd$rft1

conda activate Signac2

########## copy the avg mat and marker to a new folder ##########
##########

mkdir /zp1/data/plyu3/HCL12_copy_success_marker

##########

folder = "/zp1/data/plyu3/HCL12_copy_success"

files = list.files(folder)

for(i in 1:length(files)){
	##########
	tmp_folder = paste0("/zp1/data/plyu3/HCL12_copy_success/",files[i])
	setwd(tmp_folder)
	tmp_tag = sapply(strsplit(files[i],split="__"),function(x) x[[1]])
	##########
	tmp_files = list.files(tmp_folder)
	##########
	m1 = grep("_bg_avg_mat$",tmp_files)
	m2 = grep("_bg_marker$",tmp_files)
	##########
	files_need = tmp_files[c(m1,m2)]
	#########
	files_need_new = paste0(tmp_tag,"__",files_need)
	#########
	for(j in 1:length(files_need)){
		command = paste0("cp ",tmp_folder,"/",files_need[j]," ","/zp1/data/plyu3/HCL12_copy_success_marker/",files_need_new[j])
		print(command)
		system(command,wait=F)
	}

}
#######
#######

scp -r  /zp1/data/plyu3/HCL12_copy_success_marker plyu3@10.181.57.115:/zp1/data/plyu3/CellAnn_final_check/HCL12_copy_success_marker

#######
####### on the new server #####
#######





ssh plyu3@10.181.57.115
U[9C20&&

conda activate seurat4

########## copy the avg mat and marker to a new folder ##########
##########

mkdir /zp1/data/plyu3/CellAnn_final_check/MCA1_copy_success_marker

##########

folder = "/zp1/data/plyu3/CellAnn_final_check/MCA1_copy_success"

files = list.files(folder)

for(i in 1:length(files)){
	##########
	tmp_folder = paste0("/zp1/data/plyu3/CellAnn_final_check/MCA1_copy_success/",files[i])
	setwd(tmp_folder)
	tmp_tag = sapply(strsplit(files[i],split="__"),function(x) x[[1]])
	##########
	tmp_files = list.files(tmp_folder)
	##########
	m1 = grep("_bg_avg_mat$",tmp_files)
	m2 = grep("_bg_marker$",tmp_files)
	##########
	files_need = tmp_files[c(m1,m2)]
	#########
	files_need_new = paste0(tmp_tag,"__",files_need)
	#########
	for(j in 1:length(files_need)){
		command = paste0("cp ",tmp_folder,"/",files_need[j]," ","/zp1/data/plyu3/CellAnn_final_check/MCA1_copy_success_marker/",files_need_new[j])
		print(command)
		system(command,wait=F)
	}

}




######


setwd("/zp1/data/plyu3/CellAnn_final_check")
library(readxl)
data <- data.frame(read_xlsx("check_list3_update5.xlsx"))

#####
table(data$Background)
#####

index = c("HCL","MCA","M_Tabula_Muris")
data$tag = paste0("NO",1:length(data$Folder))
dat_cl = data[which(data$Background %in% index == T),]

folder_list = dat_cl$Folder
folder_tag = dat_cl$tag


for(i in 1:length(folder_list)){
	##########
	tmp_folder = folder_list[i]
	setwd(tmp_folder)
	tmp_tag = folder_tag[i]
	##########
	tmp_files = list.files(tmp_folder)
	##########
	m1 = grep("_bg_avg_mat$",tmp_files)
	m2 = grep("_bg_marker$",tmp_files)
	##########
	files_need = tmp_files[c(m1,m2)]
	#########
	files_need_new = paste0(tmp_tag,"__",files_need)
	#########
	for(j in 1:length(files_need)){
		command = paste0("cp ",tmp_folder,"/",files_need[j]," ","/zp1/data/plyu3/CellAnn_final_check/MCA1_copy_success_marker/",files_need_new[j])
		print(command)
		system(command,wait=F)
	}

}



setwd("/zp1/data/plyu3/CellAnn_final_check/HCL12_copy_success_marker")

files1 = list.files("/zp1/data/plyu3/CellAnn_final_check/HCL12_copy_success_marker")
files1_number = sapply(strsplit(files1,split="__"),function(x) x[[1]])
files1_number = gsub("NO","",files1_number)
files1_number = as.numeric(files1_number[!duplicated(files1_number)])

files2 = list.files("/zp1/data/plyu3/CellAnn_final_check/MCA1_copy_success_marker/")
files2_number = sapply(strsplit(files2,split="__"),function(x) x[[1]])
files2_number = gsub("NO","",files2_number)
files2_number = as.numeric(files2_number[!duplicated(files2_number)])

files_all = c(files1_number,files2_number)
files_all = sort(files_all)


###########
###########
###########

###########
###########


ssh plyu3@10.181.57.115
U[9C20&&





















